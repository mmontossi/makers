=== NOTE: From version 0.0.2 the syntax has been simplified.

---

{<img src="https://badge.fury.io/rb/fabricators.png" alt="Gem Version" />}[http://badge.fury.io/rb/fabricators] {<img src="https://codeclimate.com/github/museways/fabricators.png" />}[https://codeclimate.com/github/museways/fabricators] {<img src="https://travis-ci.org/museways/fabricators.png?branch=master" alt="Build Status" />}[https://travis-ci.org/museways/fabricators] {<img src="https://gemnasium.com/museways/fabricators.png" alt="Dependency Status" />}[https://gemnasium.com/museways/fabricators]

= Fabricators

Minimalistic factory alternative inspired in factory_girl.

= Install

Put this line in your Gemfile:
  gem 'fabricators'
  
Then bundle:
  $ bundle  

= Configuration

There is no need to configure anything, all is done automatically:

- Loading the definitions.
- Replacing the fixtures generators.
- Including the methods inside your testing framework.
- Cleaning the database after each test.

= Usage

== Methods

There are three methods available:
  attributes_for
  build
  create

Is possible to override the defaults passing a hash:
  build :user, name: 'other'
  create :category, title: 'other'

To create lists just pass the desired size as second parameter to build and create:
  build :user, 2, name: 'other'
  create :category, 5, title: 'other'

== Fabricators

Define them inside test/fabricators or spec/fabricators:
  fabricator :user do
    name 'example'
  end

== Inheritance

Can be declare nested or separated:
  fabricator :user do
    name 'example'
    fabricator :user_with_email do
      email 'example@mail.com'
    end
  end
  fabricator :user_with_age, parent: :user do
    age 9
  end

== Attributes

Define them outside your fabricators and reference them by name:
  attribute(:name) { 'example' }
  attribute(:email) { |n| "example#{n}@mail.com" }
  attribute(:age)
  fabricator :user do
    name
    email
    age
  end

== Associations

Associations are declared just by the name of the association:
  fabricator :user do
    posts
    comments 4 # By default 1, but can be overwritten
  end
  fabricator :post do
    user
  end
  fabricator :comment do
    user
  end

== Aliases

The aliases are essential when there is the need of context:
  attribute(:title, aliases: [:first_name, :last_name]) { 'example' }
  fabricators :user, aliases: :author do
    first_name
    last_name
    comments
  end
  fabricators :post, aliases: :comment do
    title
    author
  end

== Dependent attributes

If you need to use some logic that depends of another attribute you can go:
  fabricators :user do
    name 'example'
    email { "#{name}@mail.com" }
  end

== Callbacks

The available callbacks are before(:build), before(:create), after(:build) and after(:create):
  before(:build) { |u| u.name = 'global' }
  fabricator :user do
    after(:build) { |u| u.name = 'local' }
  end
